:name dropchance_calculator

key.b()

#difficultyfactor (1.0 + (0.25 * (floor(i2d(index("{difficultystring}",difficulty,0))/10.0))))

#difficultystring easy------\
----------\
mediumhard\
----------\
insane----\
nightmare-\
impossible

#unsetstring dropchancethiswave-\
peakdropchance-----\
averagesamplesize--\
addeddropchance----\
averagedropchance--

:global double dropchancethiswave
:global double dropchancefactor
:global double basemoduledropchance
:global double peakdropchance
:global string difficulty
:global int dropchancetoggle
:global double averagedropchance
:global double averagesamplesize
:global double addeddropchance
:global int unsetincrement

isTowerTesting() == true

dropchancetoggle = 1 - dropchancetoggle
gotoif(99, dropchancetoggle==0)
dropchancefactor = 1.0
basemoduledropchance = 0.01
difficulty = "easy"

dropchanceloop:
; module dropchance formula is (difficulty factor * dropchance factor * base module dropchance * log(wave/10))
dropchancethiswave = ({difficultyfactor} * basemoduledropchance * dropchancefactor * (((wave()/10.0)+(era()*1e11)+(infinity()*1e22))//10.0))
peakdropchance = max(peakdropchance , dropchancethiswave)
averagesamplesize += 1.0
addeddropchance += dropchancethiswave
averagedropchance = (addeddropchance/averagesamplesize)
gotoif(dropchanceloop, dropchancetoggle==1)

end:
unsetincrement = (unsetincrement % 5) + 1
gu(sub("{unsetstring}" , (unsetincrement - 1) * 19, (index("{unsetstring}", "-", (unsetincrement - 1)*19) - (unsetincrement - 1) *19)))
gotoif(end, unsetincrement < 5)
